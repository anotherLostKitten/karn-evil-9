from math import cos,sin,pi,floor,sqrt
from subprocess import Popen,PIPE
import mdl
def asg(l,v,i=0):
    l[i]=v
class Img:
    def __init__(self,r,c):
        self.c,self.r,self.img,self.zbuf,self.lns,self.ln,self.s,self.oof,self.pgs,self.fxmldr=c,r,[0]*r*c,[float("-inf")]*r*c,(lambda p,w=0:[[self.ln(r-round(p[i+1]/p[i+3]),round(p[i]/p[i+3]),p[i+2]/p[i+3],r-round(p[i+5]/p[i+7]),round(p[i+4]/p[i+7]),p[i+6]/p[i+7],w)for i in range(0,len(p),8)],self][1]),(lambda rs,cs,zs,rf,cf,zf,v,e=[0,0]:self.ln(rf,cf,zf,rs,cs,zs,v)if(rs>rf if abs(rf-rs)<abs(cf-cs)else cs>cf)else(([asg(e,rs,1),asg(e,2*abs(rf-rs)-abs(cf-cs)),[[self.s(e[1],c,v,zs+(zf-zs)*(cs-c)/(cs-cf)),asg(e,e[1]+1,1),asg(e,e[0]+2*abs(rf-rs)-2*abs(cf-cs))]if 0<e[0]else[self.s(e[1],c,v,zs+(zf-zs)*(cs-c)/(cs-cf)),asg(e,e[0]+2*abs(rf-rs))]for c in range(cs,cf-1 if cs>cf else cf+1,-1 if cs>cf else 1)]]if cs!=cf else self.s(rs,cs,v,zs))if abs(rf-rs)<abs(cf-cs)else([asg(e,cs,1),asg(e,2*abs(cf-cs)-abs(rf-rs)),[[self.s(r,e[1],v,zs+(zf-zs)*(rs-r)/(rs-rf)),asg(e,e[1]+1,1),asg(e,e[0]+2*abs(cf-cs)-2*abs(rf-rs))]if 0<e[0]else[self.s(r,e[1],v,zs+(zf-zs)*(rs-r)/(rs-rf)),0,asg(e,e[0]+2*abs(cf-cs))]for r in range(rs,rf-1 if rs>rf else rf+1,-1 if rs>rf else 1)]])if rs!=rf else self.s(rs,cs,v,zs))),(lambda r,c,v,z:[asg(self.img,v,c+r*self.c),asg(self.zbuf,z,c+r*self.c)]if-1<r<self.r and-1<c<self.c and z>self.zbuf[c+r*self.c]else 0),(lambda:"P3 "+str(self.c)+" "+str(self.r)+" 255\n"+" ".join(str(floor(i/65536)%256)+" "+str(floor(i/256)%256)+" "+str(i%256) for i in self.img)),(lambda p,l,u:[[self.fxmldr(r-round(p.m[i+1]/p.m[i+3]),round(p.m[i]/p.m[i+3]),p.m[i+2]/p.m[i+3],r-round(p.m[i+5]/p.m[i+7]),round(p.m[i+4]/p.m[i+7]),p.m[i+6]/p.m[i+7],r-round(p.m[i+9]/p.m[i+11]),round(p.m[i+8]/p.m[i+11]),p.m[i+10]/p.m[i+11],p.collapsethelightintoearth(i,l,u))for i in range(0,len(p.m),12)if p.bfc(i,(0,0,1))>0],self][1]),(lambda x,y,z,a,b,c,d,e,f,t:[[self.ln(round(p[0][0]+(p[2][0]-p[0][0])*(r-p[0][1])/(p[2][1]-p[0][1])),r,p[0][2]+(p[2][2]-p[0][2])*(r-p[0][1])/(p[2][1]-p[0][1]),round(p[0][0]+(p[1][0]-p[0][0])*(r-p[0][1])/(p[1][1]-p[0][1])),r,p[0][2]+(p[1][2]-p[0][2])*(r-p[0][1])/(p[1][1]-p[0][1]),t)if r<p[1][1]else self.ln(round(p[0][0]+(p[2][0]-p[0][0])*(r-p[0][1])/(p[2][1]-p[0][1])),r,p[0][2]+(p[2][2]-p[0][2])*(r-p[0][1])/(p[2][1]-p[0][1]),round(p[1][0]+(p[2][0]-p[1][0])*(r-p[1][1])/(p[2][1]-p[1][1])),r,p[1][2]+(p[2][2]-p[1][2])*(r-p[1][1])/(p[2][1]-p[1][1]),t)for r in range(p[0][1],p[2][1])]for p in [sorted([[x,y,z],[a,b,c],[d,e,f]],key=lambda q:q[1])]])
class Etrx:
    def __init__(self,m=[]):
        self.m,self.e,self.oof,self.x,self.idm,self.c,self.hb,self.t,self.bfc,self.nermal,self.dtp,self.crs,self.nilrecurring,self.collapsethelightintoearth,self.limelight=list(m),(lambda s,f:[self.m.append(i)for i in(*s,1,*f,1)]),(lambda:"\n".join(" ".join(("  "if i<10 else" "if i<100 else"")+str(i) for i in self.m[j::4]) for j in range(4))+"\n"),(lambda m:[self,[asg(self.m,e,i)for(i,e)in enumerate([sum(float(m[i%4+k*4])*self.m[i-(i%4)+k]for k in range(4))for i in range(len(self.m))])]][0]),(lambda:[[asg(self.m,1.0 if i==j else 0.0,j+4*i)for j in range(4)for i in range(4)]if self.m else[self.m.append(1.0 if i==j else 0.0)for j in range(4)for i in range(4)],self][1]),(lambda x,y,z,r:[[self.e(*[[x+r*cos((t+d)/mx*2*pi),y+r*sin((t+d)/mx*2*pi),z]for d in(0,1)])for t in range(round(mx))]for mx in[40]]),(lambda xyxy,m:[[self.e(*[[(lambda a,t:sum(pow(t,3-i)*a[i]for i in range(4)))(Etrx([xyxy[2*i+k]for i in range(4)]).x(m).m,(h+d)/mx)for k in(0,1)]+[0]for d in(0,1)])for h in range(mx)]for mx in[20]]),(lambda p,b,d:[self.m.append(i)for i in(*p,1,*b,1,*d,1)]),(lambda i,lk:self.dtp(lk,self.nermal(i))),(lambda i:self.nilrecurring(self.crs(*[[self.m[i+j+k]-self.m[i+j]for j in(0,1,2)]for k in(4,8)]))),(lambda m,pth:sum(m[i]*pth[i]for i in range(len(pth)))),(lambda p,vi:(p[1]*vi[2]-p[2]*vi[1],p[2]*vi[0]-p[0]*vi[2],p[0]*vi[1]-p[1]*vi[0])),(lambda x:[[i/f for i in x]for f in[sqrt(self.dtp(x,x))]][0]if self.dtp(x,x)else[0]*3),(lambda i,l,u:[sum(e*pow(256,i)for i,e in enumerate([round(min(255,l[0][c]*u['a'][c]+sum([(u['d'][c]*max(0,self.dtp(z,Z))+u['s'][c]*pow(max(0,2*z[2]*self.dtp(Z,z)-Z[2]),4))*k['l'][c]for Z in[self.nilrecurring(k['v'])]][0]for k in l[1:])))for c in(2,1,0)]))for z in[self.nermal(i)]][0]),(lambda u=[1,1,1]:sum(pow(256,i)*round(255*u[2-i])for i in(0,1,2)))
(lambda cs,edgm,pogm,terraformer,light,filename:[[{"push":(lambda:cs.append(Etrx(cs[-1].m))),"pop":(lambda:cs.pop()),"line":(lambda:[edgm.e([float(i)for i in b['args'][:3]],[float(i)for i in b['args'][3:]]),edgm.x(cs[-1].m),terraformer.lns(edgm.m,pogm.limelight()),edgm.m.clear()]),"circle":(lambda:[edgm.c(*[float(i)for i in b['args']]),edgm.x(cs[-1].m),terraformer.lns(edgm.m,pogm.limelight()),edgm.m.clear()]),"hermite":(lambda:[edgm.hb([float(i)for i in b['args']],(2,-3,0,1,-2,3,0,0,1,-2,1,0,1,-1,0,0)),edgm.x(cs[-1].m),terraformer.lns(edgm.m,pogm.limelight()),edgm.m.clear()]),"bezier":(lambda:[edgm.hb([float(i)for i in b['args']],(-1,3,-3,1,3,-6,3,0,-3,3,0,0,1,0,0,0)),edgm.x(cs[-1].m),terraformer.lns(edgm.m,pogm.limelight()),edgm.m.clear()]),"box":(lambda:[[pogm.t(*ooo)for ooo in[(((o[0],o[1],o[2]),(o[0],o[1]-o[4],o[2]),(o[0]+o[3],o[1],o[2])),((o[0],o[1]-o[4],o[2]),(o[0]+o[3],o[1]-o[4],o[2]),(o[0]+o[3],o[1],o[2])),((o[0],o[1],o[2]-o[5]),(o[0]+o[3],o[1],o[2]-o[5]),(o[0],o[1]-o[4],o[2]-o[5])),((o[0],o[1]-o[4],o[2]-o[5]),(o[0]+o[3],o[1],o[2]-o[5]),(o[0]+o[3],o[1]-o[4],o[2]-o[5])),((o[0]+o[3],o[1],o[2]),(o[0]+o[3],o[1]-o[4],o[2]),(o[0]+o[3],o[1],o[2]-o[5])),((o[0]+o[3],o[1]-o[4],o[2]),(o[0]+o[3],o[1]-o[4],o[2]-o[5]),(o[0]+o[3],o[1],o[2]-o[5])),((o[0],o[1],o[2]),(o[0],o[1],o[2]-o[5]),(o[0],o[1]-o[4],o[2])),((o[0],o[1]-o[4],o[2]),(o[0],o[1],o[2]-o[5]),(o[0],o[1]-o[4],o[2]-o[5])),((o[0],o[1],o[2]-o[5]),(o[0],o[1],o[2]),(o[0]+o[3],o[1],o[2]-o[5])),((o[0],o[1],o[2]),(o[0]+o[3],o[1],o[2]),(o[0]+o[3],o[1],o[2]-o[5])),((o[0],o[1]-o[4],o[2]-o[5]),(o[0]+o[3],o[1]-o[4],o[2]-o[5]),(o[0],o[1]-o[4],o[2])),((o[0],o[1]-o[4],o[2]),(o[0]+o[3],o[1]-o[4],o[2]-o[5]),(o[0]+o[3],o[1]-o[4],o[2])))for o in [[float(oo)for oo in b['args']]]][0]],pogm.x(cs[-1].m),terraformer.pgs(pogm,light,k[1][b['constants']][1]if None!=b['constants']else{'a':[0.2,0.2,0.2],'d':[0.5,0.5,0.5],'s':[0.5,0.5,0.5]}),pogm.m.clear()]),"sphere":(lambda:[[[[(pogm.t(p[i],p[i+1],p[(i+k)%len(p)])if len([p[i],p[i+1],p[(i+k)%len(p)]])==len(set([p[i],p[i+1],p[(i+k)%len(p)]]))else 0,pogm.t(p[(i+1+k)%len(p)],p[(i+k)%len(p)],p[i+1])if len([p[(i+1+k)%len(p)],p[i+1],p[(i+k)%len(p)]])==len(set([p[(i+1+k)%len(p)],p[i+1],p[(i+k)%len(p)]]))else 0)for i in range(len(p))if i%k!=k-1]for p in[[(float(b['args'][0])+float(b['args'][3])*cos(pi*j/(k-1)),float(b['args'][1])+float(b['args'][3])*sin(pi*j/(k-1))*cos(2*pi*i/k),float(b['args'][2])+float(b['args'][3])*sin(pi*j/(k-1))*sin(2*pi*i/k))for i in range(k)for j in range(k)]]]for k in[50]],pogm.x(cs[-1].m),terraformer.pgs(pogm,light,k[1][b['constants']][1]if None!=b['constants']else{'a':[0.2,0.2,0.2],'d':[0.5,0.5,0.5],'s':[0.5,0.5,0.5]}),pogm.m.clear()]),"torus":(lambda:[[[[(pogm.t(p[i],p[(i+k)%len(p)],p[i-i%k+(i+1)%k]),pogm.t(p[(i+k)%len(p)],p[(i-i%k+(i+1)%k+k)%len(p)],p[i-i%k+(i+1)%k]))for i in range(len(p))]for p in[[(float(b['args'][0])+(float(b['args'][3])*cos(2*pi*i/k)+float(b['args'][4]))*cos(2*pi*j/k),float(b['args'][1])+float(b['args'][3])*sin(2*pi*i/k),float(b['args'][0])+(float(b['args'][3])*cos(2*pi*i/k)+float(b['args'][4]))*sin(2*pi*j/k))for i in range(k)for j in range(k)]]]for k in[30]],pogm.x(cs[-1].m),terraformer.pgs(pogm,light,k[1][b['constants']][1]if None!=b['constants']else{'a':[0.2,0.2,0.2],'d':[0.5,0.5,0.5],'s':[0.5,0.5,0.5]}),pogm.m.clear()]),"scale":(lambda:asg(cs,Etrx((float(b['args'][0]),0,0,0,0,float(b['args'][1]),0,0,0,0,float(b['args'][2]),0,0,0,0,1)).x(cs[-1].m),-1)),"move":(lambda:asg(cs,Etrx((1,0,0,0,0,1,0,0,0,0,1,0,float(b['args'][0]),float(b['args'][1]),float(b['args'][2]),1)).x(cs[-1].m),-1)),"rotate":(lambda:asg(cs,Etrx({"x":(1,0,0,0,0,cos(float(b['args'][1])/180*pi),sin(float(b['args'][1])/180*pi),0,0,sin(float(b['args'][1])/-180*pi),cos(float(b['args'][1])/180*pi),0,0,0,0,1),"y":(cos(float(b['args'][1])/180*pi),0,sin(float(b['args'][1])/-180*pi),0,0,1,0,0,sin(float(b['args'][1])/180*pi),0,cos(float(b['args'][1])/180*pi),0,0,0,0,1),"z":(cos(float(b['args'][1])/180*pi),sin(float(b['args'][1])/180*pi),0,0,sin(float(b['args'][1])/-180*pi),cos(float(b['args'][1])/180*pi),0,0,0,0,1,0,0,0,0,1)}[b['args'][0]]).x(cs[-1].m),-1)),"project":(lambda:cs[-1].x((1,0,0,0,0,1,0,0,0,0,0,0,0,0,1/float(b['args'][0]),1))),"display":(lambda:[open("temp.ppm","w+").write(terraformer.oof()),Popen(("display","temp.ppm"),stdin=PIPE,stdout=PIPE,stderr=PIPE).communicate(),Popen(("rm","temp.ppm"),stdin=PIPE,stdout=PIPE,stderr=PIPE).communicate()]),"save":(lambda:[open("temp2.ppm","w+").write(terraformer.oof()),Popen(("convert","temp2.ppm",b['args'][0]),stdin=PIPE,stdout=PIPE,stderr=PIPE).communicate(),Popen(("rm","temp2.ppm"),stdin=PIPE,stdout=PIPE,stderr=PIPE).communicate()]),"clear":(lambda:[[asg(terraformer.img,0,i)for i in range(terraformer.r*terraformer.c)],[asg(terraformer.zbuf,float("-inf"),i)for i in range(terraformer.r*terraformer.c)]]),'constants':(lambda:0)}[b['op']]()for b in k[0]]for k in[mdl.parseFile(filename)]])([Etrx().idm()],Etrx(),Etrx(),Img(500,500),[[50,50,50],{"l":[255,255,255],"v":(0.5,0.75,1)}],"face.mdl")
